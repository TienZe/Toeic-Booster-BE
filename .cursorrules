# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use `.md` file in the folder `.tasks` as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first create a new `task-name.md` file review the content of the Scratchpad, clear old different task if necessary, explain the task, and plan the steps you need to take to complete the task inside that `task-name.md` file. Note that file name of a task should be clear about the new task you receive from user. The format of task name should be `{task-order}-{task-brief-description}.md`.

Each task file should include the following 5 sections:

1. Task Overview  
A brief summary of the task’s purpose and scope.

2. Task Status  
Status can be one of the following: `"Planning"`, `"In Progress"`, or `"Done"`.

Whenever you receive user feedback or there are changes in the **Requirements**, update both the **Status** and the **Scratchpad** accordingly.

- **Planning**:  
  Clarify the requirements and outline the approach for completing the task.

- **In Progress**:  
  Actively working on the task — writing code, making changes, or running commands.

- **Done**:  
  All subtasks have been completed and the task is now awaiting user review or feedback.

3. Requirements  
The detailed specifications or expectations from the user for the task.

4. Scratchpad  
A working area for to-dos, or step-by-step execution plans. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

5. Task Lessons  
Insights, mistakes, or best practices learned from completing the task.  
This helps improve performance in future tasks and summarize these lesson into a lesson saved in the `Lessons` section in the `.cursorrules` file

--

When creating a task file, please clarify the requirements with the user to ensure the Scratchpad is comprehensive and meets the user's expectations.

Also update the progress of the task in the that `task-name.md` file in Scratchpad section when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

When the user asks about a specific task, they may also specify the task order. In that case, you should refer to both the task requirements and the progress that has already been made in the corresponding `.md` file.

After completing a task, you should write a note in the `Lessons` section of the `.cursorrules` file. This helps you avoid repeating the same mistake in the future and supports continuous learning from each task.

# Tools

Note all the tools are in python3. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python3 tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```bash
venv/bin/python3 ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```bash
venv/bin/python3 ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Always use (activate) it when doing python development. First, to check whether 'uv' is available, use `which uv`. If that's the case, first activate the venv, and then use `uv pip install` to install packages. Otherwise, fall back to `pip`.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned